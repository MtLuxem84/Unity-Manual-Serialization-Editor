using System;
using System.Collections.Generic;
using System.Reflection;
using UnityEditor;
using UnityEngine;

public class MNCore
{

    public static void AddNames(ref List<string> arrayName, int value, ref List<int> arrayValue)
    {
        if (!arrayName.Contains("b" + value.ToString()))
            arrayName.Add("b" + value.ToString());
        if (!arrayValue.Contains(value))
            arrayValue.Add(value);
    }

    public static void CreateSerializedClass(string pathToCode, string fileName, int stringLenght)
    {
        //Debug.Log(pathToCode);
        //RunCreateArrays(pathToCode);
        //pathToCode = Application.dataPath + "/Scripts/AutogeneratedScripts";

        MonoScript[] scripts = (MonoScript[])Resources.FindObjectsOfTypeAll(typeof(MonoScript));

        //List<string> classname = new List<string>();

        List<ScriptProperties> scriptProperties = new List<ScriptProperties>();

        // These need to be in a list
        for (int i = 0; i < scripts.Length; i++)
        {
            var m = scripts[i];
            if (m.GetClass() != null && m.GetType() != typeof(Shader))
            {
                if (!m.GetClass().GetTypeInfo().ToString().StartsWith("Unity") && !m.GetClass().GetTypeInfo().ToString().StartsWith("TMPro") && !m.GetClass().GetTypeInfo().ToString().StartsWith("Packages")
                    && !m.GetClass().GetTypeInfo().ToString().StartsWith("Microsoft"))
                {
                    Type type = m.GetClass();

                    var methodInfos = type.GetCustomAttributes();
                    foreach (Attribute attribute in methodInfos)
                    {
                        if (attribute.GetType() == typeof(MNAttributes))
                        {
                            //var sp = new ScriptProperties();

                            Debug.Log(type.FullName);
                            //classname.Add(type.FullName);
                            Type[] types = type.GetNestedTypes();

                            for (int b = 0; b < types.Length; b++)
                            {
                                var subClassMethodInfo = types[b].GetCustomAttributes();
                                foreach (Attribute a in subClassMethodInfo)
                                {
                                    if (a.GetType() == typeof(MNSerializeClass))
                                    {
                                        var sp = new ScriptProperties();
                                        Debug.Log(types[b].Name);
                                        //classname.Add(types[b].Name);
                                        sp.className = types[b].Name;
                                        FieldInfo[] fieldInfo = types[b].GetFields();
                                        sp.hasString = HasString(fieldInfo);
                                        sp.totalBytes = GetTotalBytes(fieldInfo);
                                        FillScriptPropertiesForDirect(ref sp, fieldInfo);
                                        scriptProperties.Add(sp);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        //return;
        //string s = "// AutoGenerated:" + Environment.NewLine;
        string s = "// AutoGenerated: " + DateTime.Now.ToString() + Environment.NewLine;


        for (int i = 0; i < scriptProperties.Count; i++)
        {

            // scriptname will be the class name
            s += "[System.Serializable]" + Environment.NewLine;
            s += "public class " + scriptProperties[i].className + "Data" + Environment.NewLine;
            s += "{" + Environment.NewLine;

            //s += "     public int ArraySize = " + scriptProperties[i].totalBytes.ToString() + ";" + Environment.NewLine;

            for (int z = 0; z < scriptProperties[i].fieldPublicPrivate.Count; z++)
            {
                s += scriptProperties[i].fieldPublicPrivate[z] + " " + scriptProperties[i].fieldType[z] + " " + scriptProperties[i].fieldNames[z] + ";" + Environment.NewLine;
            }

            s += "    /// <summary>" + Environment.NewLine;
            s += "    /// Size: " + scriptProperties[i].totalBytes.ToString() + Environment.NewLine;
            s += "    /// </summary>" + Environment.NewLine;
            s += "    public void Write(" + scriptProperties[i].className + "Data" + " data, byte [] b, ref int pos)" + Environment.NewLine;
            s += "    {" + Environment.NewLine;
            //s += "        int pos = 0;" + Environment.NewLine;

            for (int z = 0; z < scriptProperties[i].serializeVal.Count; z++)
            {
                s += scriptProperties[i].serializeVal[z] + Environment.NewLine;
            }
            s += "}" + Environment.NewLine;


            s += "    /// <summary>" + Environment.NewLine;
            s += "    /// Size: " + scriptProperties[i].totalBytes.ToString() + Environment.NewLine;
            s += "    /// </summary>" + Environment.NewLine;
            s += "public void Read(byte [] b, ref int pos)" + Environment.NewLine;
            s += "{" + Environment.NewLine;
            //s += "        int pos = 0;" + Environment.NewLine;
            for (int z = 0; z < scriptProperties[i].deserializeVal.Count; z++)
            {
                s += scriptProperties[i].deserializeVal[z] + Environment.NewLine;
            }
            s += "}" + Environment.NewLine;




            s += "}" + Environment.NewLine;
        }


        if (!System.IO.Directory.Exists(pathToCode))
            System.IO.Directory.CreateDirectory(pathToCode);

        using (System.IO.StreamWriter sw =
            new System.IO.StreamWriter(pathToCode + "/" + fileName, false))
        {
            sw.Write(s);
        }
        List<string> arrayNames = new List<string>();
        List<int> arrayValue = new List<int>();

        foreach (MonoScript m in scripts)
        {
            if (m.GetClass() != null && m.GetType() != typeof(Shader))
            {
                if (!m.GetClass().GetTypeInfo().ToString().StartsWith("Unity") && !m.GetClass().GetTypeInfo().ToString().StartsWith("TMPro") && !m.GetClass().GetTypeInfo().ToString().StartsWith("Packages")
                    && !m.GetClass().GetTypeInfo().ToString().StartsWith("Microsoft"))
                {
                    Type type = m.GetClass();
                    var methodInfos = type.GetCustomAttributes();
                    foreach (Attribute attribute in methodInfos)
                    {
                        if (attribute.GetType() == typeof(MNAttributes))
                        {
                            int totalBytes = 0;

                            //Debug.Log(attribute.GetType());
                            var fieldInfo = type.GetFields();
                            for (int i = 0; i < fieldInfo.Length; i++)
                            {
                                //Debug.Log(fieldInfo[i].FieldType.ToString());
                                switch (fieldInfo[i].FieldType.ToString())
                                {
                                    case "System.Int16":
                                        totalBytes += 2;
                                        break;
                                    case "System.Int32":
                                        totalBytes += 4;

                                        break;
                                    case "System.Int64":
                                        totalBytes += 8;

                                        break;
                                    case "System.UInt16":
                                        totalBytes += 2;

                                        break;
                                    case "System.UInt32":
                                        totalBytes += 4;

                                        break;
                                    case "System.UInt64":
                                        totalBytes += 8;

                                        break;
                                    case "System.Single":
                                        totalBytes += 4;

                                        break;
                                    case "System.String":

                                        break;
                                    case "System.Decimal":
                                        totalBytes += 16;

                                        break;
                                    case "System.Byte":
                                        totalBytes += 1;

                                        break;
                                    case "System.Byte[]":
                                        break;
                                    case "System.Double":
                                        totalBytes += 8;

                                        break;
                                }
                            }

                            if (totalBytes != 0)
                            {
                                if (!arrayNames.Contains("b" + totalBytes))
                                    arrayNames.Add("b" + totalBytes);
                                if (!arrayValue.Contains(totalBytes))
                                    arrayValue.Add(totalBytes);
                                // additional bytes we will use for max string count
                                int count = stringLenght;
                                for (int q = 0; q <= totalBytes; q++)
                                {
                                    count++;
                                    if (!arrayNames.Contains("b" + count))
                                        arrayNames.Add("b" + count);
                                    if (!arrayValue.Contains(count))
                                        arrayValue.Add(count);
                                }
                            }
                        }
                    }

                    //Debug.Log(m.GetClass().GetTypeInfo().ToString());
                }
            }

        }

        AddNames(ref arrayNames, 2, ref arrayValue);
        AddNames(ref arrayNames, 4, ref arrayValue);
        AddNames(ref arrayNames, 8, ref arrayValue);

        for (int i = 0; i < scriptProperties.Count; i++)
        {
            Debug.Log(scriptProperties[i].totalBytes);
            for (int z = 0; z <= stringLenght; z++)
            {
                AddNames(ref arrayNames, scriptProperties[i].totalBytes + z, ref arrayValue);
            }
            //AddNames(ref arrayNames, scriptProperties[i].byteCount[i], ref arrayValue);
        }

        s = string.Empty;
        s = "// AutoGenerated: " + DateTime.Now.ToString() + Environment.NewLine + "public static class MNArrays  " + Environment.NewLine + "{" + Environment.NewLine;
        s += "// Base Class to move to another project only needs b2 b4 b8 to avoid compile errors. And empty method get array" + Environment.NewLine;
        for (int i = 0; i < arrayNames.Count; i++)
        {
            //Debug.Log(arrayNames[i]);
            s += "public static byte[] " + arrayNames[i] + "  = new byte[" + arrayValue[i] + "];" + Environment.NewLine;
        }

        s += "public static byte[] GetArray(int value)" + Environment.NewLine;
        s += "{" + Environment.NewLine;
        s += "switch (value)" + Environment.NewLine;
        s += "{" + Environment.NewLine;

        for (int i = 0; i < arrayNames.Count; i++)
        {
            //case 1:
            s += "  case " + arrayValue[i].ToString() + ":" + Environment.NewLine;
            s += "  return " + arrayNames[i] + ";" + Environment.NewLine;
        }
        s += "default: return new byte[0];";
        s += "}" + Environment.NewLine;
        s += "}" + Environment.NewLine;

        string ending = "}";

        if (!System.IO.Directory.Exists(pathToCode))
            System.IO.Directory.CreateDirectory(pathToCode);

        s += ending;
        using (System.IO.StreamWriter sw =
            new System.IO.StreamWriter(pathToCode + "/" + "MNArrays.cs", false))
        {
            sw.Write(s);
        }
        AssetDatabase.Refresh();
        Debug.Log("Done!");

    }

    public static void RunCreateArrays(string pathToCode)
    {
        //pathToCode = Application.dataPath + "/Scripts/AutogeneratedScripts";
        Debug.Log(pathToCode);

        MonoScript[] scripts = (MonoScript[])Resources.FindObjectsOfTypeAll(typeof(MonoScript));

        List<string> arrayNames = new List<string>();
        arrayNames.Add("b2");
        arrayNames.Add("b4");
        arrayNames.Add("b8");

        List<int> arrayValue = new List<int>();
        arrayValue.Add(2);
        arrayValue.Add(4);
        arrayValue.Add(8);

        foreach (MonoScript m in scripts)
        {
            if (m.GetClass() != null && m.GetType() != typeof(Shader))
            {
                if (!m.GetClass().GetTypeInfo().ToString().StartsWith("Unity") && !m.GetClass().GetTypeInfo().ToString().StartsWith("TMPro") && !m.GetClass().GetTypeInfo().ToString().StartsWith("Packages")
                    && !m.GetClass().GetTypeInfo().ToString().StartsWith("Microsoft"))
                {
                    Type type = m.GetClass();
                    int totalBytes = 0;
                    var methodInfos = type.GetCustomAttributes();
                    foreach (Attribute attribute in methodInfos)
                    {
                        if (attribute.GetType() == typeof(MNAttributes))
                        {
                            Debug.Log(attribute.GetType());
                            var fieldInfo = type.GetFields();
                            for (int i = 0; i < fieldInfo.Length; i++)
                            {
                                Debug.Log(fieldInfo[i].FieldType.ToString());
                                switch (fieldInfo[i].FieldType.ToString())
                                {
                                    case "System.Int16":
                                        totalBytes += 2;
                                        break;
                                    case "System.Int32":
                                        totalBytes += 4;

                                        break;
                                    case "System.Int64":
                                        totalBytes += 8;

                                        break;
                                    case "System.UInt16":
                                        totalBytes += 2;

                                        break;
                                    case "System.UInt32":
                                        totalBytes += 4;

                                        break;
                                    case "System.UInt64":
                                        totalBytes += 8;

                                        break;
                                    case "System.Single":
                                        totalBytes += 4;

                                        break;
                                    case "System.String":

                                        break;
                                    case "System.Decimal":
                                        totalBytes += 16;

                                        break;
                                    case "System.Byte":
                                        totalBytes += 1;

                                        break;
                                    case "System.Double":
                                        totalBytes += 8;

                                        break;
                                }
                            }
                            if (totalBytes != 0)
                            {
                                if (!arrayNames.Contains("b" + totalBytes))
                                    arrayNames.Add("b" + totalBytes);
                                if (!arrayValue.Contains(totalBytes))
                                    arrayValue.Add(totalBytes);
                            }

                        }
                    }
                    //Debug.Log(m.GetClass().GetTypeInfo().ToString());
                }
            }
        }


        string s = "// AutoGenerated: " + DateTime.Now.ToString() + Environment.NewLine + "public static class MNArrays  " + Environment.NewLine + "{" + Environment.NewLine;
        s += "// Base Class to move to another project only needs b2 b4 b8 to avoid compile errors. And empty method get array" + Environment.NewLine;

        for (int i = 0; i < arrayNames.Count; i++)
        {
            Debug.Log(arrayNames[i]);
            s += "public static byte[] " + arrayNames[i] + "  = new byte[" + arrayValue[i] + "];" + Environment.NewLine;
        }

        s += "public static byte[] GetArray(int value)" + Environment.NewLine;
        s += "{" + Environment.NewLine;
        s += "switch (value)" + Environment.NewLine;
        s += "{" + Environment.NewLine;

        for (int i = 0; i < arrayNames.Count; i++)
        {
            //case 1:
            s += "  case " + arrayValue[i].ToString() + ":" + Environment.NewLine;
            s += "  return " + arrayNames[i] + ";" + Environment.NewLine;
        }
        s += "default: return b2;";
        s += "}" + Environment.NewLine;
        s += "}" + Environment.NewLine;

        string ending = "}";

        if (!System.IO.Directory.Exists(pathToCode))
            System.IO.Directory.CreateDirectory(pathToCode);

        s += ending;
        using (System.IO.StreamWriter sw =
            new System.IO.StreamWriter(pathToCode + "/" + "MNArrays.cs", false))
        {
            sw.Write(s);
        }
        //AssetDatabase.Refresh();
        Debug.Log("Finished Arrays");
    }

    private static bool HasString(FieldInfo[] fieldInfo)
    {
        bool hasString = false;
        for (int z = 0; z < fieldInfo.Length; z++)
        {
            if (fieldInfo[z].GetCustomAttribute(typeof(MNIgnore)) == null)
            {
                string fieldName = fieldInfo[z].Name;
                if (fieldInfo[z].Name == "System.String")
                {
                    return hasString;
                }
            }
        }

        return hasString;
    }

    private static int GetTotalBytes(FieldInfo[] fieldInfo)
    {
        int totalBytes = 0;
        for (int z = 0; z < fieldInfo.Length; z++)
        {
            if (fieldInfo[z].GetCustomAttribute(typeof(MNIgnore)) == null)
            {
                switch (fieldInfo[z].FieldType.ToString())
                {
                    case "System.Int16":
                        totalBytes += 2;
                        break;
                    case "System.Int32":
                        totalBytes += 4;
                        break;
                    case "System.Int64":
                        totalBytes += 8;
                        break;
                    case "System.UInt16":
                        totalBytes += 2;
                        break;
                    case "System.UInt32":
                        totalBytes += 4;
                        break;
                    case "System.UInt64":
                        totalBytes += 8;
                        break;
                    case "System.Single":
                        totalBytes += 4;
                        break;
                    case "System.String":
                        totalBytes += 1;
                        break;
                    case "System.Decimal":
                        totalBytes += 16;
                        break;
                    case "System.Byte":
                        totalBytes += 1;
                        break;
                    case "System.Byte[]":
                        break;
                    case "System.Double":
                        totalBytes += 8;
                        break;
                    case "System.Boolean":
                        totalBytes += 1;
                        break;
                }

            }
        }

        return totalBytes;
    }

    private static void FillScriptPropertiesForDirect(ref ScriptProperties sp, FieldInfo[] fieldInfo)
    {
        for (int z = 0; z < fieldInfo.Length; z++)
        {
            //Debug.Log(fieldInfo[z].FieldType.ToString());
            //Debug.Log(fieldInfo[z].Name);
            if (fieldInfo[z].GetCustomAttribute(typeof(MNIgnore)) == null)
            {
                if (fieldInfo[z].IsPublic)
                    sp.fieldPublicPrivate.Add("     public");
                if (fieldInfo[z].IsPrivate)
                    sp.fieldPublicPrivate.Add("     private");

                string fieldName = fieldInfo[z].Name;
                sp.fieldNames.Add(fieldName);
                Debug.Log(fieldInfo[z].FieldType.ToString());
                switch (fieldInfo[z].FieldType.ToString())
                {
                    case "System.Int16":
                        sp.serializeVal.Add("        b[pos++] = (byte)data." + fieldName + ";" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 8);" + Environment.NewLine);
                        sp.fieldType.Add("short");
                        sp.deserializeVal.Add("        " + fieldName + " = (short)((b[pos++] << 0) | (b[pos++] << 8));");
                        sp.byteCount.Add(2);
                        break;
                    case "System.Int32":
                        sp.serializeVal.Add("        b[pos++] = (byte)data." + fieldName + ";" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 8);" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 16);" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 24);" + Environment.NewLine);
                        sp.fieldType.Add("int");
                        sp.deserializeVal.Add("        " + fieldName + " = ((b[pos++] << 0) | (b[pos++] << 8)| (b[pos++] << 16)| (b[pos++] << 24));");
                        sp.byteCount.Add(4);
                        break;
                    case "System.Int64":
                        sp.serializeVal.Add("        b[pos++] = (byte)data." + fieldName + ";" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 8);" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 16);" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 24);" + Environment.NewLine +
                            "        b[pos++] = (byte)(data." + fieldName + " >> 32); " + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 40); " + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 48); " + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 56); " + Environment.NewLine);
                        sp.fieldType.Add("long");
                        sp.deserializeVal.Add("        " + fieldName + " = (long)((b[pos++] << 0) | (b[pos++] << 8)| (b[pos++] << 16)| (b[pos++] << 24)| (b[pos++] << 32)| (b[pos++] << 40)| (b[pos++] << 48)| (b[pos++] << 56));");
                        sp.byteCount.Add(8);
                        break;
                    case "System.UInt16":
                        sp.serializeVal.Add("        b[pos++] = (byte)data." + fieldName + ";" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 8);" + Environment.NewLine);
                        sp.fieldType.Add("ushort");
                        sp.deserializeVal.Add("        " + fieldName + " = (ushort)((b[pos++] << 0) | (b[pos++] << 8));");
                        sp.byteCount.Add(2);
                        break;
                    case "System.UInt32":
                        sp.serializeVal.Add("        b[pos++] = (byte)data." + fieldName + ";" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 8);" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 16);" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 24);" + Environment.NewLine);
                        sp.fieldType.Add("uint");
                        sp.deserializeVal.Add("        " + fieldName + " = (uint)((b[pos++] << 0) | (b[pos++] << 8)| (b[pos++] << 16)| (b[pos++] << 24));");
                        sp.byteCount.Add(4);
                        break;
                    case "System.UInt64":
                        sp.serializeVal.Add("        b[pos++] = (byte)data." + fieldName + ";" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 8);" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 16);" + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 24);" + Environment.NewLine +
                            "        b[pos++] = (byte)(data." + fieldName + " >> 32); " + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 40); " + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 48); " + Environment.NewLine + "        b[pos++] = (byte)(data." + fieldName + " >> 56); " + Environment.NewLine);
                        sp.fieldType.Add("ulong");
                        sp.deserializeVal.Add("        " + fieldName + " = (ulong)((b[pos++] << 0) | (b[pos++] << 8)| (b[pos++] << 16)| (b[pos++] << 24)| (b[pos++] << 32)| (b[pos++] << 40)| (b[pos++] << 48)| (b[pos++] << 56));");
                        sp.byteCount.Add(8);
                        break;
                    case "System.Single":
                        sp.serializeVal.Add("        MNFloat.Write(ref b, ref pos, data." + fieldName + ");");
                        sp.fieldType.Add("float");
                        sp.deserializeVal.Add("        " + fieldName + " = MNFloat.Read(b, ref pos);");
                        sp.byteCount.Add(4);
                        break;
                    case "System.String":
                        sp.fieldType.Add("string");
                        sp.deserializeVal.Add("     " + fieldName + " = stream.ReadString();");
                        sp.byteCount.Add(1);
                        sp.hasString = true;
                        break;
                    case "System.Decimal":
                        sp.fieldType.Add("decimal");
                        sp.deserializeVal.Add("     " + fieldName + " = stream.ReadDecimal();");
                        sp.byteCount.Add(16);
                        break;
                    case "System.Byte":
                        sp.serializeVal.Add("        b[pos++] = (byte)data." + fieldName + ";");
                        sp.fieldType.Add("byte");
                        sp.deserializeVal.Add("        " + fieldName + " = (b[pos++]); ");
                        sp.byteCount.Add(1);
                        break;
                    case "System.Double":
                        sp.fieldType.Add("double");
                        sp.deserializeVal.Add("     " + fieldName + " = stream.ReadDouble();");
                        sp.byteCount.Add(8);
                        break;
                    case "System.Boolean":
                        sp.serializeVal.Add("        b[pos++] = (byte)(data." + fieldName + " ? 1 : 0);");
                        sp.fieldType.Add("bool");
                        sp.deserializeVal.Add("        " + fieldName + " = (b[pos++] != 0); ");
                        sp.byteCount.Add(1);
                        break;
                    case "System.Byte[]":
                        sp.serializeVal.Add("        if (data." + fieldName + ".Length > 0)" + Environment.NewLine + "        System.Buffer.BlockCopy(data." + fieldName + ", 0, b, pos, data." + fieldName + ".Length);" + Environment.NewLine + "        pos += data." + fieldName + ".Length;");
                        sp.fieldType.Add("byte[]");
                        sp.deserializeVal.Add("        if (ArraySize > 0)" + Environment.NewLine + "        System.Buffer.BlockCopy(b, pos, " + fieldName + ", 0, ArraySize); " + Environment.NewLine + "        pos += ArraySize;");
                        sp.byteCount.Add(2);
                        break;
                }
            }
        }

    }

}
public class ScriptProperties
{
    public string className;
    public List<string> serializeVal = new List<string>();
    public List<string> deserializeVal = new List<string>();
    public List<int> byteCount = new List<int>();

    public List<string> fieldPublicPrivate = new List<string>();
    public List<string> fieldType = new List<string>();
    public List<string> fieldNames = new List<string>();
    public int totalBytes;
    // Has to be dynamic
    public bool hasString;
}

